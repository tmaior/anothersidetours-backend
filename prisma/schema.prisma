datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model Tenant {
  id                    String                  @id @default(uuid())
  name                  String
  tours                 Tour[]
  reservations          Reservation[]
  addons                Addon[]
  reservationAddons     ReservationAddon[]
  blackoutDates         BlackoutDate[]
  payments              Payment[]
  notifications         Notification[]
  // User              User[]
  additionalInformation AdditionalInformation[]
}

model Tour {
  id                    String                  @id @default(uuid())
  tenantId              String                  @map("tenant_id")
  tenant                Tenant                  @relation(fields: [tenantId], references: [id])
  name                  String
  description           String
  price                 Float
  duration              Int
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  addons                Addon[]
  reservations          Reservation[]
  additionalInformation AdditionalInformation[]
}

model User {
  id             String        @id @default(uuid())
  email          String
  name           String
  phone          String
  selectedDate   DateTime
  selectedTime   String
  guestQuantity  Int
  statusCheckout String
  // tenant_id    String
  // tenant       Tenant        @relation(fields: [tenant_id], references: [id])
  reservations   Reservation[]
}

model Reservation {
  id                String             @id @default(uuid())
  tenantId          String             @map("tenant_id")
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  tourId            String             @map("tour_id")
  tour              Tour               @relation(fields: [tourId], references: [id])
  user_id           String
  user              User               @relation(fields: [user_id], references: [id])
  reservation_date  DateTime
  guestQuantity     Int
  total_price       Float
  status            String
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  reservationAddons ReservationAddon[]
  payments          Payment[]
  notifications     Notification[]

  setupIntentId   String?
  paymentMethodId String?

  CustomerAdditionalInformation CustomerAdditionalInformation[]
}

enum AddonType {
  CHECKBOX
  SELECT
}

model Addon {
  id          String    @id @default(uuid())
  tenantId    String    @map("tenant_id")
  tourId      String    @map("tour_id")
  label       String
  description String
  type        AddonType
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id])
  tour   Tour   @relation(fields: [tourId], references: [id])

  ReservationAddon ReservationAddon[]
}

model ReservationAddon {
  id            String @id @default(uuid())
  tenantId      String @map("tenant_id")
  reservationId String @map("reservation_id")
  addonId       String @map("addon_id")
  value         String

  tenant      Tenant      @relation(fields: [tenantId], references: [id])
  reservation Reservation @relation(fields: [reservationId], references: [id])
  addon       Addon       @relation(fields: [addonId], references: [id])
}

model BlackoutDate {
  id        String   @id @default(uuid())
  tenant_id String
  tenant    Tenant   @relation(fields: [tenant_id], references: [id])
  date      DateTime
  reason    String?
}

model Payment {
  id                String      @id @default(uuid())
  tenant_id         String
  tenant            Tenant      @relation(fields: [tenant_id], references: [id])
  reservation_id    String
  reservation       Reservation @relation(fields: [reservation_id], references: [id])
  payment_status    String
  amount            Float
  stripe_payment_id String
}

model Notification {
  id             String      @id @default(uuid())
  tenant_id      String
  tenant         Tenant      @relation(fields: [tenant_id], references: [id])
  reservation_id String
  reservation    Reservation @relation(fields: [reservation_id], references: [id])
  method         String
  status         String
  created_at     DateTime    @default(now())
}

model AdditionalInformation {
  id       String @id @default(uuid())
  tenantId String @map("tenant_id")
  tourId   String @map("tour_id")
  title    String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tour     Tour   @relation(fields: [tourId], references: [id])

  CustomerAdditionalInformation CustomerAdditionalInformation[]
}

model CustomerAdditionalInformation {
  id                      String @id @default(uuid())
  additionalInformationId String @map("additional_information_id")
  reservationId           String @map("reservation_id")
  value                   String

  additionalInformation AdditionalInformation @relation(fields: [additionalInformationId], references: [id])
  reservation           Reservation           @relation(fields: [reservationId], references: [id])
}
