datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model Tenant {
  id                 String               @id @default(uuid())
  name               String
  tours              Tour[]
  reservations       Reservation[]
  reservationAddons  ReservationAddon[]
  payments           Payment[]
  notifications      Notification[]
  Addon              Addon[]
  imageUrl           String?
  description        String?
  BlackoutDate       BlackoutDate[]
  Category           Category[]
  HistoryEvent       HistoryEvent[]
  CustomItem         CustomItem[]
  PaymentTransaction PaymentTransaction[]
  companyProfile     CompanyProfile[]
  Employee           Employee[]
  stripeAccountId    String?
}

model ReservationIncomplete {
  id             String    @id @default(uuid())
  tourId         String
  tour           Tour      @relation(fields: [tourId], references: [id])
  name           String
  email          String    @unique
  phone          String?
  guestQuantity  Int
  selectedDate   DateTime?
  selectedTime   DateTime?
  statusCheckout String
  sent           Boolean   @default(false) @map("sent")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
}

model Employee {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  phone             String?
  imageUrl          String?
  bio               String?
  status            String?            @default("Active")
  refreshToken      String?
  refreshExpiresAt  DateTime?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  employeeRoles     EmployeeRole[]
  reservationGuides ReservationGuide[]
  tenantId          String?
  tenant            Tenant?            @relation(fields: [tenantId], references: [id])
}

model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  employeeRoles   EmployeeRole[]
  rolePermissions RolePermission[]
}

model EmployeeRole {
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())

  @@id([employeeId, roleId])
}

model Permission {
  id              String           @id @default(uuid())
  code            String           @unique
  description     String?
  rolePermissions RolePermission[]
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  @@id([roleId, permissionId])
}

model Tour {
  id                    String                  @id @default(uuid())
  tenantId              String                  @map("tenant_id")
  tenant                Tenant                  @relation(fields: [tenantId], references: [id])
  name                  String
  description           String
  duration              Int
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  addons                Addon[]
  reservations          Reservation[]
  additionalInformation AdditionalInformation[]
  Category              Category?               @relation(fields: [categoryId], references: [id])
  categoryId            String?
  guideId               String?
  TourSchedule          TourSchedule[]
  imageUrl              String?
  BlackoutDate          BlackoutDate[]
  isDeleted             Boolean                 @default(false)
  StandardOperation     String?
  Cancellation_Policy   String?
  Considerations        String?
  WhatsIncluded         WhatsIncluded[]
  WhatToBring           WhatToBring[]
  minPerEventLimit      Int
  maxPerEventLimit      Int
  TourDemographic       TourDemographic[]
  TierPricing           TierPricing[]
  CustomItem            CustomItem[]
  ReservationIncomplete ReservationIncomplete[]
  WhatsNotIncluded      WhatsNotIncluded[]
  objectId              String?
}

model Demographic {
  id          String            @id @default(uuid())
  name        String            @unique
  caption     String
  tenantId    String            @map("tenant_id")
  tours       TourDemographic[]
  TierPricing TierPricing[]
}

model TourDemographic {
  id            String      @id @default(uuid())
  tourId        String
  demographicId String
  tour          Tour        @relation(fields: [tourId], references: [id])
  demographic   Demographic @relation(fields: [demographicId], references: [id])
}

model TierPricing {
  id            String   @id @default(uuid())
  tourId        String
  demographicId String
  pricingType   String   @default("tiered")
  basePrice     Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tour        Tour             @relation(fields: [tourId], references: [id])
  demographic Demographic      @relation(fields: [demographicId], references: [id])
  tierEntries TierPriceEntry[]

  @@unique([tourId, demographicId])
}

model TierPriceEntry {
  id             String      @id @default(uuid())
  tierPricingId  String
  quantity       Int
  price          Float
  adjustmentType String
  operation      String
  adjustment     Float
  order          Int         @default(0)
  tierPricing    TierPricing @relation(fields: [tierPricingId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(uuid())
  email          String
  name           String
  phone          String
  selectedDate   DateTime
  selectedTime   String
  guestQuantity  Int
  statusCheckout String
  // tenant_id    String
  // tenant       Tenant        @relation(fields: [tenant_id], references: [id])
  reservations   Reservation[]
}

model Reservation {
  id                            String                          @id @default(uuid())
  tenantId                      String                          @map("tenant_id")
  tenant                        Tenant                          @relation(fields: [tenantId], references: [id])
  tourId                        String                          @map("tour_id")
  tour                          Tour                            @relation(fields: [tourId], references: [id])
  user_id                       String
  user                          User                            @relation(fields: [user_id], references: [id])
  groupId                       String?
  reservation_date              DateTime
  guestQuantity                 Int
  total_price                   Float
  status                        String
  created_at                    DateTime                        @default(now())
  updated_at                    DateTime                        @updatedAt
  reservationAddons             ReservationAddon[]
  payments                      Payment[]
  notifications                 Notification[]
  setupIntentId                 String?
  paymentMethodId               String?                         @unique
  CustomerAdditionalInformation CustomerAdditionalInformation[]
  notes                         notes[]
  purchaseTags                  String?
  purchaseNote                  String?
  reservationGuides             ReservationGuide[]
  Refund                        Refund[]
  paymentIntentId               String?                         @unique
  Voucher                       Voucher[]
  HistoryEvent                  HistoryEvent[]
  Email_Reminder                Email_Reminder[]
  Purchase_Notes                Purchase_Notes[]
  PaymentTransaction            PaymentTransaction[]
  customItems                   CustomItem[]
  objectId                      String?
}

model PaymentTransaction {
  id                String      @id @default(uuid())
  tenant_id         String
  tenant            Tenant      @relation(fields: [tenant_id], references: [id])
  reservation_id    String
  reservation       Reservation @relation(fields: [reservation_id], references: [id])
  payment_method    String?
  stripe_payment_id String?
  amount            Float
  payment_status    String
  payment_details   Json?
  reference_number  String?
  description       String?
  paymentMethodId   String?
  paymentIntentId   String?
  setupIntentId     String?
  is_split_payment  Boolean     @default(false)
  split_group_id    String?
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  created_by        String?
  due_date          DateTime?
  invoice_message   String?
  days_before_event Int?
  transaction_type  String?
  metadata          Json?       @map("metadata")

  chargeId                String?              @map("charge_id")
  transaction_direction   String?              @default("charge")
  related_entity_type     String?
  related_entity_id       String?
  is_price_adjustment     Boolean              @default(false)
  adjustment_reason       String?
  is_history              Boolean?             @default(false)
  parent_transaction_id   String?
  child_transaction_id    String?
  parent_transaction      PaymentTransaction?  @relation("TransactionHistory", fields: [parent_transaction_id], references: [id])
  child_transactions      PaymentTransaction[] @relation("TransactionHistory")
  available_refund_amount Float?               @default(0)
  refunded_amount         Float?               @default(0)
  is_refundable           Boolean              @default(true)
  last_refund_date        DateTime?

  @@map("payment_transactions")
}

model Email_Reminder {
  id            String      @id @default(uuid())
  reservationId String      @map("reservation_id")
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reminderType  String      @map("reminder_type")
  scheduledAt   DateTime    @map("scheduled_at")
  sent          Boolean     @default(false) @map("sent")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model CustomItem {
  id            String   @id @default(uuid())
  tenantId      String   @map("tenant_id")
  tourId        String?  @map("tour_id")
  reservationId String?  @map("reservation_id")
  label         String
  description   String
  amount        Float
  quantity      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant      Tenant       @relation(fields: [tenantId], references: [id])
  tour        Tour?        @relation(fields: [tourId], references: [id], onDelete: Cascade)
  reservation Reservation? @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

model ReservationGuide {
  reservationId String
  guideId       String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  guide         Employee    @relation(fields: [guideId], references: [id])

  @@id([reservationId, guideId])
}

enum AddonType {
  CHECKBOX
  SELECT
}

model Addon {
  id               String             @id @default(uuid())
  tenantId         String             @map("tenant_id")
  tourId           String?            @map("tour_id")
  label            String
  description      String
  type             AddonType
  price            Float
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  tenant           Tenant             @relation(fields: [tenantId], references: [id])
  tour             Tour?              @relation(fields: [tourId], references: [id], onDelete: Cascade)
  ReservationAddon ReservationAddon[]
  objectId         String?
}

model ReservationAddon {
  id            String      @id @default(uuid())
  tenantId      String      @map("tenant_id")
  reservationId String      @map("reservation_id")
  addonId       String      @map("addon_id")
  value         String
  tenant        Tenant      @relation(fields: [tenantId], references: [id])
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  addon         Addon       @relation(fields: [addonId], references: [id])
}

model BlackoutDate {
  id         String    @id @default(uuid())
  isGlobal   Boolean   @default(false)
  categoryId String?   @map("category_id")
  category   Category? @relation(fields: [categoryId], references: [id])
  startDate  DateTime?
  endDate    DateTime?
  startTime  String?
  endTime    String?
  reason     String?
  tourId     String?   @map("tour_id")
  tour       Tour?     @relation(fields: [tourId], references: [id])
  tenantId   String
  tenant     Tenant    @relation(fields: [tenantId], references: [id])
}

model Payment {
  id                String      @id @default(uuid())
  tenant_id         String
  tenant            Tenant      @relation(fields: [tenant_id], references: [id])
  reservation_id    String
  reservation       Reservation @relation(fields: [reservation_id], references: [id])
  payment_status    String
  amount            Float
  stripe_payment_id String
}

model HistoryEvent {
  id               String       @id @default(uuid())
  tenantId         String       @map("tenant_id")
  tenant           Tenant       @relation(fields: [tenantId], references: [id])
  reservationId    String?      @map("reservation_id")
  reservation      Reservation? @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  eventType        String
  eventTitle       String
  status           String?
  creditCardInfo   String?
  value            Float?
  to               String?
  eventDescription String?
  createdBy        String?
  createdAt        DateTime     @default(now())
  metadata         Json?

  @@index([tenantId, reservationId])
}

model Notification {
  id             String      @id @default(uuid())
  tenant_id      String
  tenant         Tenant      @relation(fields: [tenant_id], references: [id])
  reservation_id String
  reservation    Reservation @relation(fields: [reservation_id], references: [id])
  method         String
  status         String
  created_at     DateTime    @default(now())
}

model AdditionalInformation {
  id                            String                          @id @default(uuid())
  tourId                        String                          @map("tour_id")
  title                         String
  tour                          Tour                            @relation(fields: [tourId], references: [id], onDelete: Cascade)
  CustomerAdditionalInformation CustomerAdditionalInformation[]
}

model CustomerAdditionalInformation {
  id                      String                @id @default(uuid())
  additionalInformationId String                @map("additional_information_id")
  reservationId           String                @map("reservation_id")
  value                   String
  additionalInformation   AdditionalInformation @relation(fields: [additionalInformationId], references: [id])
  reservation             Reservation           @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

model Voucher {
  id         String   @id @default(uuid())
  code       String   @unique
  amount     Float
  isRedeemed Boolean  @default(false)
  createdAt  DateTime @default(now())

  reservationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id])

  originReservationId String?
}

model Refund {
  id                 String   @id @default(uuid())
  reservationId      String
  paymentIntentId    String
  amount             Float
  status             String   @default("completed")
  createdAt          DateTime @default(now())
  connectedAccountId String?

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

model notes {
  id            String      @id @default(uuid())
  reservationId String      @map("reservation_id")
  title         String?
  description   String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Purchase_Notes {
  id            String      @id @default(uuid())
  reservationId String      @map("reservation_id")
  title         String?
  description   String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  objectId      String?
}

model Category {
  id           String         @id @default(uuid())
  name         String
  description  String?
  tours        Tour[]
  BlackoutDate BlackoutDate[]
  tenantId     String
  tenant       Tenant         @relation(fields: [tenantId], references: [id])
}

model TourSchedule {
  id        String   @id @default(uuid())
  tourId    String   @map("tour_id")
  tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  timeSlot  DateTime
  name      String?
  timeSlots String[]
  days      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WhatsIncluded {
  id       String @id @default(uuid())
  item     String
  tourId   String @map("tour_id")
  position Int    @default(0)
  tour     Tour   @relation(fields: [tourId], references: [id], onDelete: Cascade)
}

model WhatsNotIncluded {
  id       String @id @default(uuid())
  item     String
  tourId   String @map("tour_id")
  position Int    @default(0)
  tour     Tour   @relation(fields: [tourId], references: [id], onDelete: Cascade)
}

model WhatToBring {
  id       String @id @default(uuid())
  item     String
  tourId   String @map("tour_id")
  position Int    @default(0)
  tour     Tour   @relation(fields: [tourId], references: [id], onDelete: Cascade)
}

model CompanyProfile {
  id            String   @id @default(uuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  companyName   String
  phone         String?
  website       String?
  streetAddress String?
  zipCode       String?
  city          String?
  state         String?
  country       String?
  logoUrl       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GoogleCalendarAuth {
  id           String    @id @default(uuid())
  userId       String    @unique
  accessToken  String
  refreshToken String?
  expiryDate   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model GoogleCalendarData {
  id         String   @id @default(uuid())
  userId     String   @unique
  calendarId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
