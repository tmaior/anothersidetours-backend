datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model Tenant {
  id                String             @id @default(uuid())
  name              String
  tours             Tour[]
  reservations      Reservation[]
  reservationAddons ReservationAddon[]
  payments          Payment[]
  notifications     Notification[]
  Addon             Addon[]
  imageUrl          String?
  description       String?
  Guide             Guide[]
  BlackoutDate      BlackoutDate[]
  Category          Category[]
  HistoryEvent      HistoryEvent[]
}

model Employee {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
}

model Tour {
  id                    String                  @id @default(uuid())
  tenantId              String                  @map("tenant_id")
  tenant                Tenant                  @relation(fields: [tenantId], references: [id])
  name                  String
  description           String
  price                 Float
  duration              Int
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  addons                Addon[]
  reservations          Reservation[]
  additionalInformation AdditionalInformation[]
  Category              Category?               @relation(fields: [categoryId], references: [id])
  categoryId            String?
  guideId               String?
  TourSchedule          TourSchedule[]
  imageUrl              String?
  BlackoutDate          BlackoutDate[]
  isDeleted             Boolean                 @default(false)
  StandardOperation     String?
  WhatsIncluded         WhatsIncluded[]
  WhatToBring           WhatToBring[]
  minPerEventLimit      Int
  maxPerEventLimit      Int
}

model User {
  id             String        @id @default(uuid())
  email          String
  name           String
  phone          String
  selectedDate   DateTime
  selectedTime   String
  guestQuantity  Int
  statusCheckout String
  // tenant_id    String
  // tenant       Tenant        @relation(fields: [tenant_id], references: [id])
  reservations   Reservation[]
}

model Reservation {
  id                            String                          @id @default(uuid())
  tenantId                      String                          @map("tenant_id")
  tenant                        Tenant                          @relation(fields: [tenantId], references: [id])
  tourId                        String                          @map("tour_id")
  tour                          Tour                            @relation(fields: [tourId], references: [id])
  user_id                       String
  user                          User                            @relation(fields: [user_id], references: [id])
  reservation_date              DateTime
  guestQuantity                 Int
  total_price                   Float
  status                        String
  created_at                    DateTime                        @default(now())
  updated_at                    DateTime                        @updatedAt
  reservationAddons             ReservationAddon[]
  payments                      Payment[]
  notifications                 Notification[]
  setupIntentId                 String?
  paymentMethodId               String?                         @unique
  CustomerAdditionalInformation CustomerAdditionalInformation[]
  notes                         notes[]
  purchaseTags                  String?
  purchaseNote                  String?
  Guide                         Guide[]
  reservationGuides             ReservationGuide[]
  Refund                        Refund[]
  paymentIntentId               String?                         @unique
  Voucher                       Voucher[]
  HistoryEvent                  HistoryEvent[]
}

model ReservationGuide {
  reservationId String
  guideId       String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  guide         Guide       @relation(fields: [guideId], references: [id])

  @@id([reservationId, guideId])
}

enum AddonType {
  CHECKBOX
  SELECT
}

model Addon {
  id               String             @id @default(uuid())
  tenantId         String             @map("tenant_id")
  tourId           String?            @map("tour_id")
  label            String
  description      String
  type             AddonType
  price            Float
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  tenant           Tenant             @relation(fields: [tenantId], references: [id])
  tour             Tour?              @relation(fields: [tourId], references: [id], onDelete: Cascade)
  ReservationAddon ReservationAddon[]
}

model ReservationAddon {
  id            String      @id @default(uuid())
  tenantId      String      @map("tenant_id")
  reservationId String      @map("reservation_id")
  addonId       String      @map("addon_id")
  value         String
  tenant        Tenant      @relation(fields: [tenantId], references: [id])
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  addon         Addon       @relation(fields: [addonId], references: [id])
}

model BlackoutDate {
  id         String    @id @default(uuid())
  isGlobal   Boolean   @default(false)
  categoryId String?   @map("category_id")
  category   Category? @relation(fields: [categoryId], references: [id])
  startDate  DateTime?
  endDate    DateTime?
  startTime  String?
  endTime    String?
  reason     String?
  tourId     String?   @map("tour_id")
  tour       Tour?     @relation(fields: [tourId], references: [id])
  tenantId   String
  tenant     Tenant    @relation(fields: [tenantId], references: [id])
}

model Payment {
  id                String      @id @default(uuid())
  tenant_id         String
  tenant            Tenant      @relation(fields: [tenant_id], references: [id])
  reservation_id    String
  reservation       Reservation @relation(fields: [reservation_id], references: [id])
  payment_status    String
  amount            Float
  stripe_payment_id String
}

model HistoryEvent {
  id               String       @id @default(uuid())
  tenantId         String       @map("tenant_id")
  tenant           Tenant       @relation(fields: [tenantId], references: [id])
  reservationId    String?      @map("reservation_id")
  reservation      Reservation? @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  eventType        String
  eventTitle       String
  eventDescription String?
  createdBy        String?
  createdAt        DateTime     @default(now())

  @@index([tenantId, reservationId])
}

model Notification {
  id             String      @id @default(uuid())
  tenant_id      String
  tenant         Tenant      @relation(fields: [tenant_id], references: [id])
  reservation_id String
  reservation    Reservation @relation(fields: [reservation_id], references: [id])
  method         String
  status         String
  created_at     DateTime    @default(now())
}

model AdditionalInformation {
  id                            String                          @id @default(uuid())
  tourId                        String                          @map("tour_id")
  title                         String
  tour                          Tour                            @relation(fields: [tourId], references: [id], onDelete: Cascade)
  CustomerAdditionalInformation CustomerAdditionalInformation[]
}

model CustomerAdditionalInformation {
  id                      String                @id @default(uuid())
  additionalInformationId String                @map("additional_information_id")
  reservationId           String                @map("reservation_id")
  value                   String
  additionalInformation   AdditionalInformation @relation(fields: [additionalInformationId], references: [id])
  reservation             Reservation           @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

model Voucher {
  id         String   @id @default(uuid())
  code       String   @unique
  amount     Float
  isRedeemed Boolean  @default(false)
  createdAt  DateTime @default(now())

  reservationId String?
  reservation   Reservation? @relation(fields: [reservationId], references: [id])

  originReservationId String?
}

model Refund {
  id              String   @id @default(uuid())
  reservationId   String
  paymentIntentId String   @unique
  amount          Float
  status          String   @default("completed")
  createdAt       DateTime @default(now())

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

model notes {
  id            String      @id @default(uuid())
  reservationId String      @map("reservation_id")
  title         String?
  description   String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model Category {
  id           String         @id @default(uuid())
  name         String
  description  String?
  tours        Tour[]
  BlackoutDate BlackoutDate[]
  tenantId     String
  tenant       Tenant         @relation(fields: [tenantId], references: [id])
}

model Guide {
  id                String             @id @default(uuid())
  name              String
  email             String
  status            String
  imageUrl          String?
  available         Boolean
  phone             String
  bio               String?
  reservation       Reservation[]
  reservationGuides ReservationGuide[]
  tenantId          String
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
}

model TourSchedule {
  id        String   @id @default(uuid())
  tourId    String   @map("tour_id")
  tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  timeSlot  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WhatsIncluded {
  id     String @id @default(uuid())
  item   String
  tourId String @map("tour_id")
  tour   Tour   @relation(fields: [tourId], references: [id], onDelete: Cascade)
}

model WhatToBring {
  id     String @id @default(uuid())
  item   String
  tourId String @map("tour_id")
  tour   Tour   @relation(fields: [tourId], references: [id], onDelete: Cascade)
}
